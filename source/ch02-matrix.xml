<chapter xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Edge Lists &amp; Matricies</title>
  <section>
    <title>Using Edge Lists</title>
    <p>
      Until we start to render 3D shapes, all of our images will be generated by calling <c>draw_line</c> between pairs of points. To help organize, and later modify, our images better, we will store these points in an <em>edge list</em>, and only call <m>draw_line</m> (and thus modify our screen object) when we are ready to render the entire image. This sets up our initial graphics pipeline:
      <ul>
        <li>All shapes will be added as a series of edges to the main edge list.</li>
        <li>Any transformations (more on that later) will be applied to the main edge list.</li>
        <li>When we are ready to see/save an image, we will iterate over the edge list calling <c>draw_line</c>.</li>
      </ul>
    </p>
  </section>
</chapter>


<!-- ORIGINAL MARKDOWN NOTES

There are a few options for maintaining edge lists. Consider the following image:

  ![points]({{"/assets/img/n00-image.png" | relative_url}})

* The triangle portion could be represented by any of the following edge lists:
\begin{bmatrix}P_{0} & P_{1} & P_{2}\end{bmatrix}
  - Here, we would generate the image by iterating through the edge list 1 point at a time, connecting each point with the next one, and include a final line back to the initial point.
  - This works well if the entire image was a single closed object, but less so for open ended or disjoint objects.
\begin{bmatrix}P_{0} & P_{1} & P_{2} & P_{0}\end{bmatrix}
  - This is very similar to the first, execpt there's no implicit connection from the last point to the first.
  - This means we _could_ have open ended shapes, but disjoint shapes, like the diamond, would not be as simple, since in this option, by adding $$P_{3}$$ we wouild get a line $$\overline{P_{0}P_{3}}$$, which we don't want.
\begin{bmatrix}P_{0} & P_{1} & P_{1} & P_{2} & P_{2} & P_{0}\end{bmatrix}
  - In this version, we would generate the image by iterating over the list by pairs of points, drawing the lines between them.
  - The advantage to this approach is that the list need not "know" anything about the image and what it contains. Every edge is explicitly defined.
  - The downside is that there is a lot of duplication of points, but hey, memory's cheap.

* We will focus on the last implementation, the other two are viable, but require extra work to be able to draw any arbitrary image (such as a separate list containing # of edges per shape, or a "delimeter" point).

It is important to remember that points are $$(x, y, z)$$ triples, so our edge lists would more accurately look like the following:
  \begin{bmatrix}x_{0} & x_{1} & x_{1} & x_{2} & \dots & x_{n}
                \\\ y_{0} & y_{1} & x_{1} & y_{2} & \dots & y_{n}
                \\\ z_{0} & z_{1} & z_{1} & z_{2} & \dots & z_{n}
                \\\ 1 & 1 & 1 & 1 & \dots & 1
  \end{bmatrix}
  * The extra row of 1s at the bottom is necessary for certain transformations that we will cover later.


### Graphics Matrix Math

Now that we are arranging our image information as edge matrices, we should look into how we can leverage matrix math for graphics purposes. To start, we need only talk about two concepts, _matrix multiplication_ and the _multiplicative identiy matrix_.

**Matrix Multiplication**
- In order to mulply two matrices, $$AB$$, the number of columns in $$A$$ must equal the number of rows in $$B$$. So if $$A$$ is a $$4\times N$$ matrix, then $$B$$ must be $$n\times4$$
- Matrix multiplication is _not_ commutative, so $$AB \neq BA$$. This will be useful to us later on.
- To perform $$AB$$, you match up each _row_ of $$A$$ with the coresponding _column_ in $$B$$, multiply each coresponding element, and add those products together to find each element in the product matrix. For a simple example, consider the following:

$$\begin{bmatrix}1 & 2 & 3 & 4\end{bmatrix} \begin{bmatrix}a\\b\\c\\d \end{bmatrix} = \begin{bmatrix}1a + 2b + 3c + 4d\end{bmatrix}$$

- For a more complex example:

$$\begin{bmatrix}1 & 2 & 3
                \\ 4 & 5 & 6
                \\ 7 & 8 & 9\end{bmatrix}
  \begin{bmatrix}a & b
                \\ c & d
                \\ e & f\end{bmatrix} =
  \begin{bmatrix}1a + 2c + 3e & 1b + 2d + 3f
                \\4a + 5c + 6e & 4b + 5d + 6f
                \\7a + 8c + 9e & 7b + 8d + 9f\end{bmatrix}$$

**Multiplicative Identity**
- The multiplicative identiy matrix must:
  - Be a square matrix.
  - Have a diagonal of 1s, from upper-left to lower-right corners.
  - Have all otehr values be 0.
- A $$4\times4$$ identity matrix:
\begin{bmatrix}1 & 0 & 0 & 0
              \\\ 0 & 1 & 0 & 0
              \\\ 0 & 0 & 1 & 0
              \\\ 0 & 0 & 0 & 1
\end{bmatrix}

-->
