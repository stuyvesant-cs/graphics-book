<chapter xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Z Buffering</title>
  <introduction>
    A hidden surface is any surface that is represented within our polygon matrices but would not be visible in the generated image. There are genrally two reasons a surface would be hidden; either it is facing away from the viewer, or it is being obstructed by another surface. Backfacce culling takes care of the first case, and Z-Buffering is how we will handle the second. Importantly, we could not work on this kind of hidden surface removal until after working on scanline conversion. Backface culling happens per polygon, eitehr the entire surface is visible or not based on its orientation. We cannot be certain that when one object is in front of another, that an entire polygon is covered, so in order to accurately deal with this, we need to be working at the pixel level. Now that we are scanline converting our images, we have a fraemwork in palce to visit all the pixels that should be drawn.
  </introduction>
  <section>
    <title>The Z-Buffer</title>
    <p>
      A Z-Buffer is a 2D array of <em>floating point</em> z values that maps directly to the 2D array of colors/pixels that contains our image. For example, the Z-buffer value at <m>(4, 10)</m> is the z coordinate for the pixel drawn at point <m>(4, 10)</m>. Since z values represent the depth of a pixel, we can use the Z-Buffer to keep track of how forward or backward any plotted pixel is.
    </p>
    <p>
      Currently when we plot a pixel we provide the <m>(x, y)</m> coordinates and color. Now we will provide <m>(x, y, z)</m> and a color. <m>(x, y)</m> will determine the position of the color in the image and the <m>z</m> value in the Z-Buffer. Before we deicdee to plot a given pixel in the image, we will check the <m>z</m> value against the value currently in the Z-Buffer.
    </p>
    <p>
      If the new <m>z</m> is larger than the value in the Z-Buffer, that means that whatever pixel is currently plotted in the image comes from a shape that is <em>behind</em> the new pixel (remember, +z is closer to the viewer). When this happens we will update the image and Z-Buffer at the specified <m>(x, y)</m> position with the new color and <m>z</m> value. Otherwise, we will skip plotting the pixel in the image and Z-Buffer, as there must already be an object at that position that is more forward.
    </p>
    <p>
      In order for this the Z-Buffer to work, we need a good value to initialize Z-Buffer entries to. What we want is a value that represents something so far behind that any object we add would be on top. This should be the smallest (most negative) value possible. In the math world, a resonable suggestion would be to use -&#8734;. Turns out in the Computer Programming world, that is also the answer! There is in fact a standard way to represent both &#8734; and -&#8734; with <url href="https://en.wikipedia.org/wiki/IEEE_754-1985#Positive_and_negative_infinity">floating point values</url>. Often dividing a negative floating point value by 0 will do this (i.e. <c>-1.0/0.0</c>), but different programming languages often have constants defined for this value as well.
    </p>
  </section>
  <section>
    <title>Calculating <m>z</m> Values</title>
    <p>
      In addition to maintaining a Z-Buffer, we need to now calculate z values whenever we draw lines. This includes our <c>draw_line</c>, <c>scanline_convert</c>, and <c>draw_scanline</c> (if you made a separate function to just draw scanlines) functions.
    </p>
    <subsection>
      <title><c>scanline_convert</c></title>
      <p>
        Here, <m>z</m> values can be calculated the same way we find the <m>x</m> values. We already have <m>z</m> coordinates stored in out polygon matrices, we just need to calcualte the <m>z</m> values as we move across each scanline. It is important to remember that unlike <m>y</m>, we cannot be certain that the <m>z</m> value is the same along the entire scanline.
      </p>
      <p>
        <m>z_0</m> is on the line <m>\overline{BT}</m>, so it starts at <m>z_b</m> and goes to <m>z_t</m>. <m>z_1</m> is on the line <m>\overline{BM}</m> starting at <m>z_b</m> going to <m>z_m</m> and then it moves onto the line <m>\overline{MT}</m>, going from <m>z_m</m> to <m>z_t</m>.
      </p>
      <p>
        You will need a <m>\Delta z_0</m> and <m>\Delta z_1</m>. These are calculated the same was as their <m>x</m> equivalents:
        <me>
          \Delta z = \dfrac{\text {total change in z}}{\text {number of scanlines}}
        </me>
      </p>
    </subsection>
    <subsection>
      <title><c>draw_line</c> and <c>draw_scanline</c></title>
      <p>
        We actually have to go back to our very first graphics algorithm and modify it to take <m>z</m> values into account. On the plus side, we <em>need</em> <m>z</m> values to be floating point based, so we will not have to try to map them as best we can to integers. This makes the calculation more straightforward. You can think of generating <m>z</m> values in a similar way to what weed need to do in <c>scanline_convert</c>.
      </p>
      <p>
        If we are drawing a line from <m>(x_0, y_0, z_0)</m> to <m>(x_1, y_1, z_1)</m>, that means as we draw the line, <m>z</m> must go from <m>z_0</m> to <m>z_1</m>. Since we draw our lines 1 pixel at a time, we need to figure out how much <m>z</m> changes with each pixel. Like above:
        <me>
          \Delta z = \dfrac{\text {total change in z}}{\text {number of pixels plotted}}
        </me>
        Note that the denominator is the <em># of pixels</em> not the length of the line. If the line is in octants I or VIII, the total # of pixels is based on the <m>x</m> values. If the line is in octants II or VII, the total # of pixels is based on the <m>y</m> values. Think about the value that controls the loop that generates the line. Which coordinate is guaranteed to go up by 1 each time?
      </p>
    </subsection>
  </section>
</chapter>
