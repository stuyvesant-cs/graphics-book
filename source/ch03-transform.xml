<chapter xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Transformations</title>
  <section>
    <title>Transformation Matrices</title>
    <p>
      In order to perform transformations, we will construct a <em>transformation matrix</em> <m>F</m>, which can then be applied to our edge matrix <m>E</m> by matrix multiplication. By asserting that the order of multiplication is always <m>FE</m>, we can constrain <m>F</m> to always be a <m>4\times4</m> matrix. For each transformation, it is helpful to think of it with the following framework:
      <ul>
        <li>What information is required in order to perform the transformation?</li>
        <li>What happens to <m>(x, y, z)</m> after the transformation is applied?</li>
      </ul>
      While there are many transformations we could create, we will focus on <em>translation</em>, <em>dialation</em>, and <em>rotation</em> for our graphics engine. These will allow us to make interesting manupulations of our images, while also demonstrating how to develop other transformations, if desired.
    </p>
    <subsection>
      <title>Translation</title>
      <p>
        Translations can be thought of as sliding an image along any axis. Translations should preserve the number of points, the order of the points, as well as the distances between them.
        <ul>
          <li>Necessary information: Translation factors for each component, <m>(a, b, c)</m></li>
          <li>Function: <m>T_{a, b, c} (x, y, z) \rightarrow (x+a, y+b, z+c)</m></li>
        </ul>

        You can generate a translation matrix by starting with the Identity matrix, and then replacing the values in the last column with your translation factors like so:

        <me>
          \begin{bmatrix} 1 \amp 0 \amp 0 \amp a
                        \\\ 0 \amp 1 \amp 0 \amp b
                        \\\ 0 \amp 0 \amp 1 \amp c
                        \\\ 0 \amp 0 \amp 0 \amp 1
          \end{bmatrix}
          \begin{bmatrix} x_0 \amp x_1
                        \\ y_0 \amp y_1
                        \\ z_0 \amp z_1
                        \\ 1 \amp 1\end{bmatrix} =
          \begin{bmatrix} x_0 + a \amp x_1 + a
                        \\y_0 + b \amp y_1 + b
                        \\z_0 + c \amp z_1 + c
                        \\ 1 \amp 1 \end{bmatrix}
        </me>

        Note that this simple translation matrix is made possible by including the bottom row of 1s in our edge matrix. Without that, we'd have to include operations like: <m>\dfrac{x + a}{x}</m>, which would in turn mean that the translation matrix would have to change for <em>every point</em> in the edge matrix, like so:

        <me>
          \begin{bmatrix} \frac{x_0+a}{x_0} \amp 0 \amp 0
                          \\\ 0 \amp \frac{y_0+b}{y_0} \amp 0
                          \\\ 0 \amp 0 \amp \frac{z_0+c}{z_0}
            \end{bmatrix}
            \begin{bmatrix} x_0
                          \\ y_0
                          \\ z_0 \end{bmatrix} =
            \begin{bmatrix} x_0 + a
                          \\y_0 + b
                          \\z_0 + c\end{bmatrix}
        </me>
      </p>
    </subsection>
  </section>
</chapter>


<!-- ORIGINAL MARKDOWN NOTES


**Translation** or move


**Dilation** or scale
- Necessary information: Dilation factors for each component, <m>(a, b, c)<m>
- Function: <m>D_{a, b, c} (x, y, z) \rightarrow (ax, by, cz)<m>
- Matrix \amp example:

  <m>\begin{bmatrix} a \amp 0 \amp 0 \amp 0
                \\\ 0 \amp b \amp 0 \amp 0
                \\\ 0 \amp 0 \amp c \amp 0
                \\\ 0 \amp 0 \amp 0 \amp 1
  \end{bmatrix}
  \begin{bmatrix} x_0 \amp x_1
                \\ y_0 \amp y_1
                \\ z_0 \amp z_1
                \\ 1 \amp 1
  \end{bmatrix} =
  \begin{bmatrix} ax_0 \amp ax_1
                \\by_0 \amp by_1
                \\cz_0 \amp cz_1
                \\ 1 \amp 1
  \end{bmatrix}<m>

- Dilations intended to preserve the asptect ratio of the orginal image should use the same value for <m>a<m>, <m>b<m>, and <m>c<m>. Using different values will resulting in stretching/squishing the image in verious dimentions.
- Dilations applied in this manner are also done with respect ot the origin. Eventually, this will be less of a concern, but for now, you can achieve arbitrary dilations by translating to the origin, dilating, and then translating back.

**Rotation**
- Necessary information: Angle of rotation, <m>\theta<m> and axis of rotation.
- Figuring out the rotation function is a bit more complicated than the previous transformations.
- First let's look at a translation about the z axis:
  ![axis]({{"/assets/img/n02-z_rotation.png" | relative_url}})
  - Since the point does not change along the axis of rotation, we only need to conern ourselves with <m>(x, y)<m>
  - We need to find a way to represent <m>(x',y')<m> based on information we know.
  - Using polar coordinates, we can re-write <m>(x, y)<m> as <m>(rcos\phi, rsin\phi)<m>
  - Similarly, <m>(x', y')<m> can be written as <m>(rcos(\phi+\theta), rsin(\phi+\theta))<m>
  - Using the angle sum formula, and the values for <m>(x, y)<m> above, we get the following:

    <m>x' = rcos(\phi + \theta) \quad y' = rsin(\phi + \theta)<m>

    <m>x' = rcos\phi cos\theta - rsin\phi sin\theta \quad y' = rsin\phi cos\theta + rcos\phi sin\theta<m>

    <m>x' = xcos\theta - ysin\theta \quad y' = ycos\theta + xsin\theta<m>

- z-axis rotation
  - Function: <m>R_{\theta, z-axis} (x, y, z) \rightarrow (xcos\theta-ysin\theta, xsin\theta+ycos\theta,z)<m>
  - Matrix \amp example:

    <m>\begin{bmatrix} cos\theta \amp -sin\theta \amp 0 \amp 0
                  \\\ sin\theta \amp cos\theta \amp 0 \amp 0
                  \\\ 0 \amp 0 \amp 1 \amp 0
                  \\\ 0 \amp 0 \amp 0 \amp 1
    \end{bmatrix}
    \begin{bmatrix} x_0
                  \\ y_0
                  \\ z_0
                  \\ 1
    \end{bmatrix} =
    \begin{bmatrix} x_0cos\theta-y_0sin\theta
                  \\x_0sin\theta + y_0cos\theta
                  \\z_0
                  \\ 1
    \end{bmatrix}<m>

- x-axis rotation
  - Function: <m>R_{\theta, x-axis} (x, y, z) \rightarrow (x, ycos\theta - zsin\theta, ysin\theta + zcos\theta)<m>
  - Matrix \amp example:

    <m>\begin{bmatrix} 1 \amp 0 \amp 0 \amp 0
                  \\\ 0 \amp cos\theta \amp -sin\theta \amp 0
                  \\\ 0 \amp sin\theta \amp cos\theta \amp 0
                  \\\ 0 \amp 0 \amp 0 \amp 1
    \end{bmatrix}
    \begin{bmatrix} x_0
                  \\ y_0
                  \\ z_0
                  \\ 1
    \end{bmatrix} =
    \begin{bmatrix} x_0
                  \\y_0cos\theta - z_0sin\theta
                  \\y_0sin\theta + z_0cos\theta
                  \\ 1
    \end{bmatrix}<m>

- y-axis rotation
  - Function: <m>R_{\theta, y-axis} (x, y, z) \rightarrow (xcos\theta+zsin\theta, y, -xsin\theta + zcos\theta)<m>
  - Matrix \amp example:

    <m>\begin{bmatrix} cos\theta \amp 0 \amp sin\theta \amp 0
                  \\\ 0 \amp 1 \amp 0 \amp 0
                  \\\ -sin\theta \amp 0 \amp cos\theta \amp 0
                  \\\ 0 \amp 0 \amp 0 \amp 1
    \end{bmatrix}
    \begin{bmatrix} x_0
                  \\ y_0
                  \\ z_0
                  \\ 1
    \end{bmatrix} =
    \begin{bmatrix} x_0cos\theta+z_0sin\theta
                  \\y_0
                  \\-x_0sin\theta + z_0cos\theta
                  \\ 1
    \end{bmatrix}<m>


-->
