<chapter xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Backface Culling</title>
  <introduction>
    Backface Culling is a <em>hidden surface removal</em> algorithm. As the name implies, its purpose is to omit any polygons (or surfaces) that would not be visible normally. Reducind the number of polygons to be rendered will provide a major efficiency boost, especially as we add more complexity (and thus calculations) to our polygon rendering. Backface culling specifically deals with the fact that the back side of a shape is entirely blocked by the front. So at any given viewing angle, you can only see at most half of the 3D shapes we are working with.
  </introduction>
  <section>
    <title>Vectors</title>
    <introduction>
      Before we get into how backface culling works, we need to take a quick detour to cover some pieces of Vector math. This will also come in handy when we start working with lighting and shading.
    </introduction>
    <p>
      A <url href="https://en.wikipedia.org/wiki/Euclidean_vector">vector</url>is a unit that has both direction and magnitude (size). Vectors are written like so: <m>\lt x, y, z></m> Notice that vector components are placed inside <m>\lt ></m> to differentiate them from points. A point only describes a single point in space, whereas a vector describes a relationship between 2 points (often, not always, an arbitrary point and the origin)
    </p>
    <p>
      You can think of a vector as describing how you would get from point <m>A</m> to point <m>B</m>. For example, consider the following two points:
      <me>
        \begin{aligned}
          p0 \amp= (4, 10, 0) \\
          p1 \amp= (6, 5, 23) \\
        \end{aligned}
      </me>
      To get from <m>p0</m> to <m>p1</m>, you would have to move +2 in x, -5 in y and +23 in z, so we would write the vector as:
      <me>
        \overrightarrow{A} = \lt 2, -5, 23>
      </me>
      The vector from <m>p1</m> to <m>p0</m> moves in the opposite direction, and would be written as:
      <me>
        \overrightarrow{B} = \lt -2, 5, -23>
      </me>

      Generally, you can find the vector between 2 points by subtraction. Notationally, vectors are written with a <m>\rightarrow</m> as seen above.
    </p>
  </section>
  <section>
    <title>The Algorithm</title>
    <p>
      As mentioend before, backface culling is the process of removing the backwards facing surfaces from our rendering engine. In order to do this, we need to define 2 vectors:
      <ol>
        <li><m>\overrightarrow{N}</m>: The surface normal, a vector perpendicular to the plane of the polygon (or surface), pointing outward.</li>
        <li><m>\overrightarrow{V}</m>: The view vector, a vector pointing out from the plane of the polygon (or surface) into the "eye" of the observer.</li>
      </ol>

      <image source="images/ch06-backface_culling.png">
        <description>A side-view of a polygon with a vctor poining perpendicular from it, and another vector drawn between the surace and an eye.</description>
      </image>

      We can tell if a surface is front or back facing based on the value of <m>\theta</m>, the angle between <m>\overrightarrow{N}</m> and <m>\overrightarrow{V}</m>. When <m> -90 \lt \theta \lt 90</m>, then the surface is visible to the observer. Outside of that range, the surface is pointing away from the observer and is thus a backface. While it is referred to as backface culling, this process could be more accurately described as frontface including. We don't actually remove the backfaces from our polygon lists (if we rotate the shape, then those faces may no longer be back facing!), rather, we check and only draw the polygons facing forward. We can break up backface culling as follows:
      <ol>
        <li>Calculate <m>\overrightarrow{N}</m></li>
        <li>Calculate <m>\theta</m></li>
        <li>IF <m>-90 \lt \theta \lt 90</m>, draw the triangle.</li>
      </ol>
    </p>

    <subsection>
      <title>Calculate <m>\overrightarrow{N}</m></title>
      <p>
        We can find the surface normal by taking the <em>cross product</em> of two vectors along the edges of the polygon provided that they share one endpoint and point in opposite directions. If we have a trainlge like this:

        <image source="images/ch06-surface_normal.png">
          <description>A triangle labeled p0, p1, p2</description>
        </image>

        <m>\overrightarrow{A}</m> is the vector from <m>P_0</m> to <m>P_1</m> and <m>\overrightarrow{B}</m> is the vector from <m>P_0</m> to <m>P_2</m>. We can get the cross procuct like this:

        <me>
          \begin{aligned}
          \overrightarrow{A} \amp= P_1 - P_0 = \lt x_1 - x_0, y_1 - y_0, z_1 - z_0> \\
          \overrightarrow{B} \amp= P_2 - P_0 = \lt x_2 - x_0, y_2 - y_0, z_2 - z_0> \\
          \overrightarrow{N} \amp= \overrightarrow{A} \times \overrightarrow{B} \\
          \overrightarrow{N} \amp= \lt a_yb_z - a_zb_y, a_zb_x - a_xb_z, a_xb_y - a_yb_x>
          \end{aligned}
        </me>
      </p>
    </subsection>
    <subsection>
      <title>Calculate <m>\theta</m></title>
      <p>
        Before we figure out <m>\theta</m>, we need to discuss the <em>view vector</em> (<m>\overrightarrow{V}</m>). <m>\overrightarrow{V}</m> is supposed to be a vector that comes out of the plane of a surface and into the observer's eye. So the question is, what is the relationship between the observer and the surface?
      </p>
      <p>
        For right now, we will assume that the observer is very very very far away from the object. This assumption means that moving left, right, up or down will not have any perceptible effect on what part of the object you are looking at. Think about looking up at the moon, if you move around, you don't start to see a new part of the moon. It looks the same, even if you went from Staten Island up to the Bronx, the moon would look the same. Programatically, this means that we can ignore any changes along the x or y axes.
      </p>
      <p>
        So z is the important axis, since that determines if you are in front of or behind an object. Remember that z moves in a positive direction out from the screen towards the viewer, so <m>\overrightarrow{V}</m>, the vector from the object to the viewer, should have a positive z component. For right now we can use <m>\overrightarrow{V} = \lt 0, 0, 1></m>
        <aside>
          <p>
            We will not be looking at changing <m>\overrightarrow{V}</m> for now, but you can think about what that would mean for the rendered image and what effects that might lead to.
          </p>
        </aside>
        for the following reasons:
        <ul>
          <li>We don't care about changes in x and y, so leaving them at 0 is fine.</li>
          <li>We need a positive z.</li>
          <li>By giving z the value of 1, the total mangnitude of <m>\overrightarrow{V}</m> is 1. This is referred to as a <m>normalized</m> vector.  It's not very important right now, but it will be later on, so we might as well start here.</li>
        </ul>
      </p>
      <p>
        Now that we know both <m>\overrightarrow{N}</m> and <m>\overrightarrow{V}</m>, there's a little bit of vector math we can use to our advantage to help us find <m>\theta</m>. The <url href="https://www.mathsisfun.com/algebra/vectors-dot-product.html">dot prduct</url> of  <m>\overrightarrow{N}</m> and <m>\overrightarrow{V}</m> is a <em>scalar</em> (not a vector) value equal to the cosine of the angle between them times the product of each vector's magnitude (<m>M</m>). Or, more succintly: <m>\overrightarrow{N} \cdot \overrightarrow{V} = Mcos\theta</m>. Given two vectors, you can calculate the dot product like so:
        <me>
          \overrightarrow{N} \cdot \overrightarrow{V} = Mcos\theta = n_xv_x + n_yv_y + n_zv_z
        </me>
        There are properties of <m>cos\theta</m>, that can help us out a lot. Namely, <m>cos\theta > 0</m> when <m>-90 \lt \theta \lt 90</m> which is conveniently, exactly the range for surfaces we want to see. So it turns out, we only care about whether or not the dot product is positive or negative. If it's positive, then the surface is front facing, and we should draw it, if it's negative, we pass. And since mangnitude is always positive, we don't actually need to worry about it for this calculation (later on, when we get to lighting, we will care about mangnitude, but that's a problem for future us, who will be smarter than present us).
      </p>
    </subsection>
    <subsection>
      <title>Putting it all together</title>
      <p>
        Given any triangle starting at <m>P_0</m>:
        <aside>
          <p>
            The keen observer will note that since <m>\overrightarrow{V} = \lt 0, 0, 1></m>, the x and y components of the dot product will be 0. Also, since the z component of <m>\overrightarrow{V}</m> is 1, the dot product will simply be the z component of <m>\overrightarrow{N}</m>. This is ok for now, but eventually we will actually need the value of the dot product, so it doesn't hurt to do that now anyway.
          </p>
        </aside>
        <ol>
          <li>Calculate <m>\overrightarrow{N} = \overrightarrow{A} \times \overrightarrow{B}</m>, where <m>\overrightarrow{A} = P_1 - P_0</m>, and <m>\overrightarrow{B} = P_2 - P_0</m>.</li>
          <li>Calculate <m>\overrightarrow{N} \cdot \overrightarrow{V}</m>, where <m>\overrightarrow{V} = \lt 0, 0, 1></m></li>
          <li>If <m>\overrightarrow{N} \cdot \overrightarrow{V} > 0</m>, draw the triangle.</li>
        </ol>
      </p>
    </subsection>
  </section>
</chapter>
