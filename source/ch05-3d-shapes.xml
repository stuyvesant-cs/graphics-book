<chapter xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>3D Shapes</title>
  <section>
    <title></title>
    <p>
    </p>
  </section>
</chapter>

<!--
3D Shapes

We will be working with the following 3D shapes:
* Box, Sphere, Torus
* There are many other 3D shapes that could be easily generated programmatic, these specific three allow us to work with and test many advanced features, especially when it comes to lighting & shading. If you want to add more shapes, keep that idea as a feature to be added to your final project.
* For each shape, we want to start by considering 2 important questions:
  1. What given information should we require?
  2. What are the points that our engine will need to generate in order to draw the shape?
  * The goal of our engine will be to create the necessary points from the given information (this is how we created circles & splines as well).

__Box__
* Given Information:
  1. A vertex: for consistency, we will be using the __left-top-front__ vertex.
  2. Width: Size in the __x__ dimension
  3. Height: Size in the __y__ dimension
  3. Depth: Size in the __z__ dimension
* Defining Points:
  * The 8 vertices of the box.
* Once you have the 8 vertices, you can directly add the 12 edges that make up the box. You don't need to do anything fancy here.

__Sphere__
* Given Information:
  1. Center
  2. Radius
* Defining Points:
  * Points on the surface of the sphere.
* Point Generation
  * The points on the surface of a sphere can be generated by taking a circle and rotating it. Each circle rotation creates a new "slice" of the sphere.
  * The circle can be rotated about the x or y axes, but not z. The only difference will be the location of the "poles" of the sphere. An x-rotated sphere will have its poles on the left and right ends, while a y-rotated sphere will have its poles on the top and bottom.

    $$
    \begin{array}{c}
    x rotation \\
    \left[
    \begin{matrix} 1 & 0 & 0
                  \\\ 0 & cos(\phi) & -sin(\phi)
                  \\\ 0 & sin(\phi) & cos(phi)
    \end{matrix}
    \right]
    \end{array}

    \begin{array}{c}
    circle \\
    \left[
    \begin{matrix} rcos(\theta)
                  \\\ rsin(\theta)
                  \\\ 0
    \end{matrix}
    \right]
    \end{array}

    =

    \begin{array}{c}
     sphere \\
    \left[
    \begin{matrix} rcos(\theta)
                  \\\ rsin(\theta)cos(\phi)
                  \\\ rsin(\theta)sin(\phi)
    \end{matrix}
    \right]
    \end{array}
    $$

  * The matrix multiplication above leaves us with equations that we can use to find the points of a sphere:

      $$
      \begin{aligned}
      x &= rcos(\theta) + C_x \\
      y &= rsin(\theta)cos(\phi) + C_y \\
      z &= rsin(\theta)sin(\phi) + C_z
      \end{aligned}
      $$

  * Here $$\phi$$ is used as the angle of rotation and $$\theta$$ is used as the angle of circle creation. If you only use one angle, then you would generate one point per circle each rotation. The resulting shape would be a sprial going along the sphere (pleasing, but not our goal).
    * You can generate a sphere either by creating a full circle and rotating it π radians, or by creating a semi-circle and rotating it 2π radians. For reasons that will become clear later, it is to our advantage to use the semi-circle method.
  * With these equations we can create a nested-loop parametric function to generate all the points on a circle:
    ```
    for rot: 0 -> 1
      for cir: 0 -> 1
        x = r * cos(π * cir) + Cx
        y = r * sin(π * cir) * cos(2π * rot) + Cy
        z = r * sin(π * cir) * sin(2π * rot) + Cz
    ```

__Torus__
* Given Information:
  1. Center
  2. Radius of circular cross-section (r)
  3. Distance for torus center to center of the cross-section (R)
* Defining Points:
  * Points on the surface of the torus.
* A torus (donut, bagel), can be generated in a similar way to a sphere, except you move the circle away from the torus center before rotating.
* Here you have to be careful about how you move the circle and then rotate it. Only specific combinations will work:
  * Move a circle horizontally (x translation) and y rotation.
  * Move a circle vertically (y translation) and x rotation.

    $$
    \begin{array}{c}
     y rotation \\
    \left[
    \begin{matrix} cos(\phi) & 0 & sin(\phi)
                  \\\ 0 & 1 & 0
                  \\\ -sin(\phi) & 0 & cos(phi)
    \end{matrix}
    \right]
    \end{array}

    \begin{array}{c}
    circle \\
    \left[
    \begin{matrix} rcos(\theta) + R
                  \\\ rsin(\theta)
                  \\\ 0
    \end{matrix}
    \right]
    \end{array}

    =

    \begin{array}{c}
     sphere \\
    \left[
    \begin{matrix} cos(\phi)(rcos(\theta) + R)
                  \\\ rsin(\theta)
                  \\\ -rsin(\phi)(rcos(\theta) + R)
    \end{matrix}
    \right]
    \end{array}
    $$


  * The matrix multiplication above leaves us with equations that we can use to find the points of a torus:

    $$
    \begin{aligned}
    x &= cos(p) * (rcos(t) + R) + C_x \\
    y &= rsin(t) + C_y \\
    z &= -sin(p) * (rcos(t) + R) + C_z
    \end{aligned}
    $$

  - Unlike the sphere, you will draw a complete circle for each rotation.

-->
